#+TITLE: MongoDB
#+AUTHOR: Tooraj Taraz
#+OPTIONS: ^:nil _:nil
#+SETUPFILE: ~/.doom.d/retro-dark.theme

* MongoDB
** MySQL to Mongo Lang!

*** Table/Collection creation
#+BEGIN_SRC js
db.people.insertOne( {
    user_id: "abc123",
    age: 55,
    status: "A"
 } )
#+END_SRC

#+BEGIN_SRC sql
CREATE TABLE people (
    id MEDIUMINT NOT NULL
        AUTO_INCREMENT,
    user_id Varchar(30),
    age Number,
    status char(1),
    PRIMARY KEY (id)
)
#+END_SRC
*** Insertion
#+BEGIN_SRC js
db.people.insertOne({
    user_id: "bcd001",
    age: 45, status: "A"
})
#+END_SRC

#+BEGIN_SRC sql
INSERT INTO people(user_id,
                  age,
                  status
                  )
VALUES ("bcd001",
        45,
        "A"
       )
#+END_SRC
*** Queries
#+BEGIN_SRC js
db.people.find({
    status: "A"
}).sort({
    user_id: -1
})
#+END_SRC

#+BEGIN_SRC sql
SELECT *
FROM people
WHERE status = "A"
ORDER BY user_id DESC
#+END_SRC

** How to install?
*** Headless windows server
You can find whatever you are going to need in the link below, You also can use notes provided after the link!
- https://community.chocolatey.org/packages/mongodb

Using this line of code you can install chocolatey package manager on your server:
#+BEGIN_SRC shell
Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
#+END_SRC

You just need to run this command on your server, please have in mind that prior to this command you need to install chocolatey package manager on your server:
,#+BEGIN_SRC shell
choco install mongodb --pre
#+END_SRC

You can provide other parameters such as:
1. /dataPath: - where MongoDB stores its database files - defaults to "$env:ProgramData\MongoDB\data\db"
2. /logPath: - where MongoDB stores its logs - defaults to "$env:ProgramData\MongoDB\log"

*** Centos 8
You can find a rather verbose documentation on this website:
- https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/
But these notes are less verbose and easier to follow if you are a experienced system admin.
**** Configure package manager
Before anything you need to add mongo's repository so that yum can install mongodb:
Use your favorite command-line text editor to create a file in this path:
- /etc/yum.repos.d/mongodb-org-5.0.repo
And paste this yaml file:
#+BEGIN_SRC yaml
[mongodb-org-5.0]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/5.0/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://www.mongodb.org/static/pgp/server-5.0.asc
#+END_SRC

**** Install the package
Now you just need to run the command below and you are good to go:
#+BEGIN_SRC shell
sudo yum install -y mongodb-org
#Or for installing a specific version
sudo yum install -y mongodb-org-5.0.2 mongodb-org-database-5.0.2 mongodb-org-server-5.0.2 mongodb-org-shell-5.0.2 mongodb-org-mongos-5.0.2 mongodb-org-tools-5.0.2
#+END_SRC

*** Ubuntu 20.04
You can find a detailed blog post by digital ocean in the link below:
- https://www.digitalocean.com/community/tutorials/how-to-install-mongodb-on-ubuntu-20-04
Or even mongo's documentation:
- https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/
**** Configure package manager
We need to add mongo's repository to apt's configuration, as apt requires packages to be signed to prevent man-in-the-middle attack we need to import mongo's keys, for doing so we need to type the command below in our terminal:
#+BEGIN_SRC shell
curl -fsSL https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add -
#+END_SRC
#+RESULTS:
OK
Now we can add mongo's repository:
#+BEGIN_SRC shell
echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list
#+END_SRC
After updating apt's db we can safely install mongodb package on our server:
#+BEGIN_SRC shell
sudo apt update
sudo apt install mongodb-org
#+END_SRC

*** Starting mongo's service (Ubuntu and Centos)
As far as I know mongo can be handled by any INIT system such as systemd, runit, openrc, init.d. But as we all know, systemd this "GOOD DEVIL" is the most popular and every distro is using it; that's why I will only explain starting mongodb service using systemd:
#+BEGIN_SRC shell
#TO START
sudo systemctl start mongod
#TO START AND ENABLE AUTOSTART
sudo systemctl enable --now mongod
#TO STOP
sudo systemctl stop mongod
#TO RESTART
sudo systemctl restart mongod
#TO DISABLE AUTOSTART
sudo systemctl disable mongod
#+END_SRC

** How to automate this process?
1. Ansible : https://galaxy.ansible.com/community/mongodb
2. Puppet : https://forge.puppet.com/modules/puppet/mongodb
3. Chef : https://supermarket.chef.io/cookbooks/mongodb

** How to setup our database?
If we successfully install mongodb on our server, we will have access to mongo cli tool, using that we can do all kind of stuff with our database :).
Before moving on issue this command to get mongodb's interactive command line:
#+BEGIN_SRC  shell
$ mongo
MongoDB shell version v4.4.10
connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("66ed5c8d-e780-47d9-822e-c747a35870cd") }
MongoDB server version: 4.4.10
>
#+END_SRC
*** Creating a new user with admin access
1. Creating an admin user for any database:
#+BEGIN_SRC js
use admin
db.createUser({
    user: "mongoadmin",
    pwd: "mongoadmin",
    roles: [
        "userAdminAnyDatabase",
        "dbAdminAnyDatabase",
        "readWriteAnyDatabase"
    ]
})
#+END_SRC
2. Creating user for different databases with different roles:
#+BEGIN_SRC js
use admin
db.createUser({
    user:"replSetManager",
    pwd:"password",
    roles:[
        {
            role:"clusterManager",
            db:"admin"
        },
        {
            role:"dbOwner",
            db:"adminsblog"
        },
        {
            role:"readWrite",
            db:"departmentblog"
        },
        {
            role:"read",
            db:"otherblog"
        }
    ]
})
#+END_SRC
3. Enabling authorization (OPTIONAL)
#+BEGIN_SRC yaml
#open /etc/mongod.conf with your favorite text editor and add this section:
security:
  authorization: enabled
#+END_SRC
*** Creating a new database
There are to steps to it:
1. Telling mongodb name of the database
2. Insert something to this database
#+BEGIN_SRC js
use myBrandNewDB
db.dummy.insert({
    name: "Ada Lovelace",
    age: 205
})
#+END_SRC
*** Connecting to our database
We can use mongouri for that matter, the overall format of it is:
- mongodb://[user]:[pass]@[server address]:[port]/[database name]
